MVZ is an opinionated MVC framework inspired by and build upon the fabulous zappaja - node development for the lazy. 

Its mostly smoke and mirrors filled in by convention:
  MVZ = 
    /models
    /views
    /controllers (zappa'd)

Create a new context and signal app.ready:

  require 'mvz' (ready) ->
    @extend logger:require 'winston'
    ready()

Add a model - it needs to return data when mvz calls its constructor

  // models/model.coffee
  module.exports = -> { 
    id:1
    title:'simply MVZ'
    description:'Hello MVZ user'
  }

Now route to http://yoursite/model

Where's the controller? Where's the view? What's the point of all of this? The M in MVC stands for
model, but only in the most trivial examples would it be able to stand in for the business / domain model part 
of your application. MVC is about seperation of concerns, MVZ allows you to write these
concerns independently of each other, and where it is appropriate to map concerns onto 
one another by name.

Controllers are zappa modules with a modified signature:

  // controllers/mainpage.coffee
  @extend = controller: -> return this

Views are powered by zappa so choose your favorite engine:

  // views/mainpage.jade
  div {name}

Models return data and listen for commands

  // models/mainpage.coffee
  @extend = model: ->
    name:'fred'

Now route to http://yoursite/mainpage

Or in zappa-speak, inline MVC

  require 'mvz' (ready) ->

    @extend controller: ->
    
      @model -> name:'jean'

      @view 
        div name
    
      return this

    ready()

What's happening here? MVZ routes url requests to controllers which then act as mediators between 
models and views. 
The views are provided by Zappa so most view engines are compatible. 
To the interesting stuff - how much new code should an app provide? Well, MVZ = MVC so lets take a closer look 
at what the controller is set up to do - route. The controller's default action is to route GET/PUT/POST/DELETE 
requests to the model and then through to the appropriate view. Zappa underlies the controller so simply calling 
the appropriate verb handler results in the familiar express patterns:

  @extend controller: ->
    @get -> @render model
    @get '/:id': -> @render model.parts(@params.id)
    @post -> model.parts.push(@params)

 But MVC has its own familiar patterns and lends itslf to restful routing:

  request          action   model                 view
  GET     /page    index    query name:page       page {name:'fred'}
  GET     /page/1  show     query name:page,id:1  page/1 {}
  POST    /page    create   store name:           page
  PUT     /page    update
  DELETE  /page    destroy

Which leads to an nice implementation of the responsibility seperation that MVC was designed to address. 
However, MVC and routing particularly has become has becis is express style verb handlers are created The actions all exist on the controller object and can be overriden, but because it is all so CRUDy, the default controller
is in a good position to handle the requests directly - so long as it can map each request onto an appropriate repository command:

  @index = -> return model
  @show = (id) -> return model.parts[id]
  @create = (p) -> model.parts[p.id]=p
  @update = (id,p) -> model.parts[id]=p
  
 transforming the request into a query command and passing this onto the model. The model
is where it gets interesting. 

  // models/page.coffee
  


  
First off, its primary purpose is to route incomming urls to actions. Get '/' we have already seen

  // controllers/singlepage.coffee
  @extend = controller: -> 
  
    @get ':/id': ->
    return this


MVZ controllers are pretty standard except that they can be nested in a hierarchy so that a page controller may contain and defer to several sub-page controllers

//mainpage.coffee
@extend = controller: ->
  @include 'header'
  @include 'section1'
  @include 'section2'
  @include 'footer'
  
  @render {
    title:'main'
    sections:['section 1','section 2']
    version:'1.0.0.1'
  }
  
In this way the responsibility for generating a page response is shared between a composable collection of reusable components. 
The header and footer controllers are a bit unusual in that these responsibilities are usually undertaken by the view template 
interpolating appropriate sections of the model. By providing their own controllers, MVZ has a consistent way to 

Registering routes

By default MVZ registers routes to controller actions using path / name matching. 
All you need to do is put your contoller files in the controllers folder for MVZ to find and route to them by simple path / name matching:

  url route = 'http://yoursite/yourpage' will be registered to controllers/yourpage.coffee

You can explicitly register controller routes with @registerRoutes []. This allows you to set an alias such as Home:index